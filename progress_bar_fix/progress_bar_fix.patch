--- ViewData.tsx.original
+++ ViewData.tsx.fixed
@@ -794,9 +794,15 @@
   const handleGenerateLlmResponse = async (requirementId: number, model: string = 'moa') => {
     if (!requirementId) return;
     
+    // Clear any lingering progress indicators first
+    setBulkGenerationProgress({
+      total: 0,
+      completed: 0,
+      isProcessing: false,
+      model: ''
+    });
+    
     try {
-      // Set both the single response indicator and the progress tracking for visual feedback
       setIsGeneratingResponse(true);
       setIsGenerating(true);
       setProcessingItems([requirementId]);
@@ -1208,6 +1214,12 @@
   // Function to generate responses using selected model
   const generateResponse = async (model: string) => {
     // ... existing code ...
+    
+    // Reset any stale progress indicators before starting
+    setIsGeneratingResponse(false);
+    setBulkGenerationProgress(prev => ({
+      ...prev,
+      isProcessing: false
+    }));
 
     // ... rest of the function ...
   };
@@ -925,6 +937,12 @@
   // Optimized function to handle bulk generation of responses
   const handleGenerateResponses = async (modelProvider: 'openai' | 'anthropic' | 'deepseek' | 'moa') => {
     // ... existing code ...
+    
+    // Reset any stale progress indicators before starting
+    setIsGeneratingResponse(false);
+    setBulkGenerationProgress(prev => ({
+      ...prev,
+      isProcessing: false
+    }));
 
     // ... rest of the function ...
 
@@ -1042,9 +1060,17 @@
     } finally {
       // Keep status visible for a moment
       setTimeout(() => {
-        setIsGenerating(false);
-        setProcessingItems([]);
+        setIsGenerating(false);
+        setIsGeneratingResponse(false); // Explicitly reset the response generation flag for MOA
+        setProcessingItems([]);
         
+        // Clear all individual processing indicators after bulk operation completes
+        setProcessingIndividualItems({});
+        
+        // Also force reset the bulk generation progress indicators
+        setBulkGenerationProgress({
+          total: 0,
+          completed: 0,
+          isProcessing: false,
+          model: ''
+        });
       }, 1500);
     }
   };
